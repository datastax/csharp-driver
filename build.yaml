schedules:
  commit:
    # Run short suite on commit
    schedule: per_commit
    matrix:
      exclude:
        # Only build with latest for mono and netstandard 2.0
        - dotnet: ['mono', 'netcoreapp2.1']
          cassandra: ['2.1', '2.2', '3.0']
        # Only build with 2.1 and latest for netstandard 1.5
        - dotnet: 'netcoreapp2.0'
          cassandra: ['2.2', '3.0']
  nightly:
    # nightly job for primary branches to run all configs.
    schedule: nightly
    branches:
      # regex matches primary branch format (2.1, 3.x, 3.0.x, 3.1.x, master, etc).
      include: ["/((\\d+(\\.[\\dx]+)+)|master)/"]
  adhoc:
    # adhoc job for non-primary braches that doesn't have a schedule but may be used to run all configs.
    schedule: adhoc
    branches:
      exclude: ["/((\\d+(\\.[\\dx]+)+)|master)/"]
os:
  - ubuntu/bionic64/csharp-driver
cassandra:
  - '2.1'
  - '2.2'
  - '3.0'
  - '3.11'
dotnet:
  - 'mono'
  - 'netcoreapp2.0'
  - 'netcoreapp2.1'
build:
  - script: |
      # Set the Java paths (for CCM)
      export JAVA_HOME=$CCM_JAVA_HOME
      export PATH=$JAVA_HOME/bin:$PATH
      export SIMULACRON_PATH=$HOME/simulacron.jar

      # Define Cassandra runtime
      echo "========== Setting Apache Cassandra Version =========="
      export CASSANDRA_VERSION=$CCM_CASSANDRA_VERSION

      echo "========== Copying ssl files to $HOME/ssl =========="
      cp -r /home/jenkins/ccm/ssl $HOME/ssl
 
      if [ $DOTNET_VERSION = 'mono' ]; then      
          echo "========== Starting Mono Build =========="
          mono --version
          # Define alias for Nuget
          nuget() {
                mono /usr/local/bin/nuget.exe "$@"
          }
          export -f nuget

          # Install the required packages
          nuget install NUnit.Runners -Version 3.6.1 -OutputDirectory testrunner

          # Compile the driver and test code
          msbuild /t:restore /v:m src/Cassandra.sln
          msbuild /p:Configuration=Release /v:m /p:DynamicConstants=LINUX src/Cassandra.sln

          # Run the tests
          mono ./testrunner/NUnit.ConsoleRunner.3.6.1/tools/nunit3-console.exe src/Cassandra.IntegrationTests/bin/Release/net452/Cassandra.IntegrationTests.dll --where "cat != long && cat != memory" --labels=All --result:"TestResult.xml" || error=true
                    
          #Fail the build if there was an error
          if [ $error ]
          then 
              exit -1
          fi
      else
          echo "========== Starting .NET Core Build =========="
          export DOTNET_CLI_TELEMETRY_OPTOUT=1
          dotnet --version

          # Install the required packages
          dotnet restore src

          # Run the tests
          dotnet test src/Cassandra.IntegrationTests/Cassandra.IntegrationTests.csproj -v n -f $DOTNET_VERSION -c Release --filter "(TestCategory!=long)&(TestCategory!=memory)" --logger "nunit;LogFilePath=../../TestResult.xml" || error=true
                    
          #Fail the build if there was an error
          if [ $error ]
          then 
              exit -1
          fi
      fi

  - nunit:
    - "TestResult.xml"

