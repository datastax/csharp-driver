#!groovy

// branch pattern for cron
branchPatternCron = ~"(master)"

pipeline {
  agent none

  // Global pipeline timeout
  options {
    disableConcurrentBuilds()
    timeout(time: 10, unit: 'HOURS')
    buildDiscarder(logRotator(artifactNumToKeepStr: '10', // Keep only the last 10 artifacts
                              numToKeepStr: '50'))        // Keep only the last 50 build records
  }

  parameters {
    choice(
      name: 'CI_SCHEDULE',
      choices: ['DEFAULT-PER-COMMIT', 'NIGHTLY', 'WEEKLY'],
      description: '''<table style="width:100%">
                        <col width="20%">
                        <col width="80%">
                        <tr>
                          <th align="left">Choice</th>
                          <th align="left">Description</th>
                        </tr>
                        <tr>
                          <td><strong>ubuntu/bionic64/csharp-driver</strong></td>
                          <td>Ubuntu 18.04 LTS x86_64</td>
                        </tr>
                        <tr>
                          <td><strong>win/cs</strong></td>
                          <td>Windows 10</td>
                        </tr>
                      </table>''')
    choice(
      name: 'CI_SCHEDULE_OS_VERSION',
      choices: ['DEFAULT-PER-COMMIT', 'ubuntu/bionic64/csharp-driver', 'win/cs'],
      description: 'CI testing operating system version to utilize')
  }

  triggers {
    parameterizedCron(branchPatternCron.matcher(env.BRANCH_NAME).matches() ? """
      # Every weeknight (Monday - Friday) around 20:00 and 22:00 Pacific / 05:00 and 07:00 Central Europe
      H 22 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_OS_VERSION=ubuntu/bionic64/csharp-driver
      H 20 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_OS_VERSION=win/cs

      # Every Saturday around 01:00 and 05:00 Pacific / 10:00 and 14:00 Central Europe
      H 5 * * 6 %CI_SCHEDULE=WEEKLY;CI_SCHEDULE_OS_VERSION=ubuntu/bionic64/csharp-driver
      H 1 * * 6 %CI_SCHEDULE=WEEKLY;CI_SCHEDULE_OS_VERSION=win/cs
    """ : "")
  }

  environment {
    DOTNET_CLI_TELEMETRY_OPTOUT = '1'
    SERVER_VERSION_SNI = 'dse-6.7'
    SERVER_VERSION_SNI_WINDOWS = '3.11'
    SIMULACRON_PATH = '/home/jenkins/simulacron.jar'
    SIMULACRON_PATH_WINDOWS = 'C:\\Users\\Admin\\simulacron.jar'
    CCM_ENVIRONMENT_SHELL = '/usr/local/bin/ccm_environment.sh'
    CCM_ENVIRONMENT_SHELL_WINDOWS = '/mnt/c/Users/Admin/ccm_environment.sh'
    BuildAllTargets = 'True'
    RunCodeAnalyzers = 'True'
  }

  stages {
    stage('Per-Commit') {
      when {
        beforeAgent true
        allOf {
          expression { params.CI_SCHEDULE == 'DEFAULT-PER-COMMIT' }
          not { buildingTag() }
        }
      }

      environment {
        OS_VERSION = 'ubuntu/bionic64/csharp-driver'
      }

      matrix {
        axes {
          axis {
            name 'SERVER_VERSION'
            values '2.2',     // latest 2.2.x Apache Cassandra�
                  '3.0',     // latest 3.0.x Apache Cassandra�
                  '3.11',    // latest 3.11.x Apache Cassandra�
                  '4.0',    // Development Apache Cassandra�
                  'dse-5.1.35', // latest 5.1.x DataStax Enterprise
                  'dse-6.7.17', // latest 6.7.x DataStax Enterprise
                  'dse-6.8.30' // 6.8 current DataStax Enterprise
          }
          axis {
            name 'DOTNET_VERSION'
            values 'mono', 'netcoreapp3.1'
          }
        }
        excludes {
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'mono'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.2', '3.0', 'dse-5.1.35', 'dse-6.8.30'
            }
          }
        }

        agent {
          label "${OS_VERSION}"
        }

        stages {
          stage('Initialize-Environment') {
            steps {
              script {
                def SHAREDPIPELINE = load "${env.WORKSPACE}/Jenkinsfile-shared.groovy"
                SHAREDPIPELINE.initializeEnvironmentStep()
              }
            }
          }
          stage('Describe-Build') {
            steps {
              script {
              SHAREDPIPELINE.describePerCommitStage()
              }
            }
          }
          stage('Install-Dependencies') {
            steps {
              script {
              SHAREDPIPELINE.installDependencies()
              }
            }
          }
          stage('Build-Driver') {
            steps {
              script {
              SHAREDPIPELINE.buildDriver()
              }
            }
          }
          stage('Execute-Tests') {
            steps {
              script {
              SHAREDPIPELINE.executeTests(true)
              }
            }
            post {
              always {
                junit testResults: '**/TestResult.xml'
              }
            }
          }
        }
      }
      post {
        aborted {
              script {
          SHAREDPIPELINE.notifySlack('aborted')
              }
        }
        success {
              script {
          SHAREDPIPELINE.notifySlack('completed')
              }
        }
        unstable {
              script {
          SHAREDPIPELINE.notifySlack('unstable')
              }
        }
        failure {
              script {
          SHAREDPIPELINE.notifySlack('FAILED')
              }
        }
      }
    }

    stage('Nightly-Ubuntu') {
      when {
        beforeAgent true
        allOf {
          expression { params.CI_SCHEDULE == 'NIGHTLY' }
          expression { params.CI_SCHEDULE_OS_VERSION == 'ubuntu/bionic64/csharp-driver' }
          not { buildingTag() }
        }
      }

      environment {
        OS_VERSION = "${params.CI_SCHEDULE_OS_VERSION}"
      }

      // ##
      // # Building on Linux
      // #   - Do not build using net452 and net461
      // #   - Target all Apache Cassandra� and DataStax Enterprise versions for netcoreapp2.1
      // ##
      // H 0 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_DOTNET_VERSION=ALL;CI_SCHEDULE_SERVER_VERSION=2.2 3.11 dse-5.1 dse-6.7;CI_SCHEDULE_OS_VERSION=ubuntu/bionic64/csharp-driver
      // H 1 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_DOTNET_VERSION=netcoreapp2.1;CI_SCHEDULE_SERVER_VERSION=ALL;CI_SCHEDULE_OS_VERSION=ubuntu/bionic64/csharp-driver
      matrix {
        axes {
          axis {
            name 'SERVER_VERSION'
            values '2.1',     // Legacy Apache Cassandra�
                  '2.2',     // Legacy Apache Cassandra�
                  '3.0',     // Previous Apache Cassandra�
                  '3.11',    // Current Apache Cassandra�
                  '4.0',     // Development Apache Cassandra�
                  'dse-5.1', // Legacy DataStax Enterprise
                  'dse-6.0', // Previous DataStax Enterprise
                  'dse-6.7', // Current DataStax Enterprise
                  'dse-6.8'  // Current DataStax Enterprise
          }
          axis {
            name 'DOTNET_VERSION'
            values 'mono', 'netcoreapp2.1', 'netcoreapp3.1'
          }
        }
        excludes {
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'mono'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1', '3.0', 'dse-6.0'
            }
          }
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'netcoreapp2.1'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1', '2.2', '3.0', 'dse-5.1', 'dse-6.0'
            }
          }
        }

        agent {
          label "${OS_VERSION}"
        }

        stages {
          stage('Initialize-Environment') {
            steps {
              script {
                def SHAREDPIPELINE = load "${env.WORKSPACE}/Jenkinsfile-shared.groovy"
              SHAREDPIPELINE.initializeEnvironmentStep()
              }
            }
          }
          stage('Describe-Build') {
            steps {
              script {
              SHAREDPIPELINE.describeScheduledTestingStage()
              }
            }
          }
          stage('Install-Dependencies') {
            steps {
              script {
              SHAREDPIPELINE.installDependencies()
              }
            }
          }
          stage('Build-Driver') {
            steps {
              script {
              SHAREDPIPELINE.buildDriver()
              }
            }
          }
          stage('Execute-Tests') {
            steps {
              script {
              SHAREDPIPELINE.executeTests(false)
              }
            }
            post {
              always {
                junit testResults: '**/TestResult.xml'
              }
            }
          }
        }
      }
      post {
        aborted {
              script {
          SHAREDPIPELINE.notifySlack('aborted')
              }
        }
        success {
              script {
          SHAREDPIPELINE.notifySlack('completed')
              }
        }
        unstable {
              script {
          SHAREDPIPELINE.notifySlack('unstable')
              }
        }
        failure {
              script {
          SHAREDPIPELINE.notifySlack('FAILED')
              }
        }
      }
    }

    stage('Nightly-Windows') {
      when {
        beforeAgent true
        allOf {
          expression { params.CI_SCHEDULE == 'NIGHTLY' }
          expression { params.CI_SCHEDULE_OS_VERSION == 'win/cs' }
          not { buildingTag() }
        }
      }

      environment {
        OS_VERSION = "${params.CI_SCHEDULE_OS_VERSION}"
      }
      
      // # Building on Windows
      // #   - Do not build using mono
      // #   - Target Apache Cassandra� v3.11.x for netcoreapp2.1
      // #   - Target Apache Cassandra� v2.1.x, v2.2.x, v3.11.x for net452
      // #   - Target Apache Cassandra� v2.2.x, v3.11.x for net461
      // ##
      // H 2 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_DOTNET_VERSION=netcoreapp2.1;CI_SCHEDULE_SERVER_VERSION=3.11;CI_SCHEDULE_OS_VERSION=win/cs
      // H 2 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_DOTNET_VERSION=net452;CI_SCHEDULE_SERVER_VERSION=2.1 2.2 3.11;CI_SCHEDULE_OS_VERSION=win/cs
      // H 2 * * 1-5 %CI_SCHEDULE=NIGHTLY;CI_SCHEDULE_DOTNET_VERSION=net461;CI_SCHEDULE_SERVER_VERSION=2.2 3.11;CI_SCHEDULE_OS_VERSION=win/cs
      matrix {
        axes {
          axis {
            name 'SERVER_VERSION'
            values '2.1',     // Legacy Apache Cassandra�
                  '2.2',     // Legacy Apache Cassandra�
                  '3.11',    // Current Apache Cassandra�
                  '4.0'     // Development Apache Cassandra�
          }
          axis {
            name 'DOTNET_VERSION'
            values 'netcoreapp2.1', 'netcoreapp3.1', 'net452', 'net462', 'net472', 'net48'
          }
        }
        excludes {
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'net462'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1'
            }
          }
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'netcoreapp3.1'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1', '2.2'
            }
          }
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'net472', 'net48'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1', '2.2', '4.0'
            }
          }
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'net452', 'netcoreapp2.1'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1'
            }
          }
        }

        agent {
          label "${OS_VERSION}"
        }

        stages {
          stage('Initialize-Environment') {
            steps {
              script {
                def SHAREDPIPELINE = load "${env.WORKSPACE}/Jenkinsfile-shared.groovy"
              SHAREDPIPELINE.initializeEnvironmentStep()
              }
            }
          }
          stage('Describe-Build') {
            steps {
              script {
              SHAREDPIPELINE.describeScheduledTestingStage()
              }
            }
          }
          stage('Install-Dependencies') {
            steps {
              script {
              SHAREDPIPELINE.installDependencies()
              }
            }
          }
          stage('Build-Driver') {
            steps {
              script {
              SHAREDPIPELINE.buildDriver()
              }
            }
          }
          stage('Execute-Tests') {
            steps {
              script {
              SHAREDPIPELINE.executeTests(false)
              }
            }
            post {
              always {
                junit testResults: '**/TestResult.xml'
              }
            }
          }
        }
      }
      post {
        aborted {
              script {
          SHAREDPIPELINE.notifySlack('aborted')
              }
        }
        success {
              script {
          SHAREDPIPELINE.notifySlack('completed')
              }
        }
        unstable {
              script {
          SHAREDPIPELINE.notifySlack('unstable')
              }
        }
        failure {
              script {
          SHAREDPIPELINE.notifySlack('FAILED')
              }
        }
      }
    }
    
    stage('Weekly-Ubuntu') {
      when {
        beforeAgent true
        allOf {
          expression { params.CI_SCHEDULE == 'WEEKLY' }
          expression { params.CI_SCHEDULE_OS_VERSION == 'ubuntu/bionic64/csharp-driver' }
          not { buildingTag() }
        }
      }

      environment {
        OS_VERSION = "${params.CI_SCHEDULE_OS_VERSION}"
      }

      matrix {
        axes {
          axis {
            name 'SERVER_VERSION'
            values '2.1',     // Legacy Apache Cassandra�
                  '2.2',     // Legacy Apache Cassandra�
                  '3.11',    // Current Apache Cassandra�
                  '4.0',     // Development Apache Cassandra�
                  'dse-5.1', // Legacy DataStax Enterprise
                  'dse-6.0', // Previous DataStax Enterprise
                  'dse-6.7', // Current DataStax Enterprise
                  'dse-6.8'  // Current DataStax Enterprise
          }
          axis {
            name 'DOTNET_VERSION'
            values 'mono', 'netcoreapp2.1', 'netcoreapp3.1'
          }
        }
        excludes {
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'netcoreapp2.1'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1', 'dse-6.0'
            }
          }
        }

        agent {
          label "${OS_VERSION}"
        }

        stages {
          stage('Initialize-Environment') {
            steps {
              script {
                def SHAREDPIPELINE = load "${env.WORKSPACE}/Jenkinsfile-shared.groovy"
              SHAREDPIPELINE.initializeEnvironmentStep()
              }
            }
          }
          stage('Describe-Build') {
            steps {
              script {
              SHAREDPIPELINE.describeScheduledTestingStage()
              }
            }
          }
          stage('Install-Dependencies') {
            steps {
              script {
              SHAREDPIPELINE.installDependencies()
              }
            }
          }
          stage('Build-Driver') {
            steps {
              script {
              SHAREDPIPELINE.buildDriver()
              }
            }
          }
          stage('Execute-Tests') {
            steps {
              script {
              SHAREDPIPELINE.executeTests(false)
              }
            }
            post {
              always {
                junit testResults: '**/TestResult.xml'
              }
            }
          }
        }
      }
      post {
        aborted {
              script {
          SHAREDPIPELINE.notifySlack('aborted')
              }
        }
        success {
              script {
          SHAREDPIPELINE.notifySlack('completed')
              }
        }
        unstable {
              script {
          SHAREDPIPELINE.notifySlack('unstable')
              }
        }
        failure {
              script {
          SHAREDPIPELINE.notifySlack('FAILED')
              }
        }
      }
    }
    
    stage('Weekly-Windows') {
      when {
        beforeAgent true
        allOf {
          expression { params.CI_SCHEDULE == 'WEEKLY' }
          expression { params.CI_SCHEDULE_OS_VERSION == 'win/cs' }
          not { buildingTag() }
        }
      }

      environment {
        OS_VERSION = "${params.CI_SCHEDULE_OS_VERSION}"
      }

      matrix {
        axes {
          axis {
            name 'SERVER_VERSION'
            values '2.1',     // Legacy Apache Cassandra�
                  '2.2',     // Legacy Apache Cassandra�
                  '3.11',    // Current Apache Cassandra�
                  '4.0'     // Development Apache Cassandra�
          }
          axis {
            name 'DOTNET_VERSION'
            values 'netcoreapp2.1', 'netcoreapp3.1', 'net452', 'net462', 'net472', 'net48'
          }
        }
        excludes {
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'net452', 'net472', 'net48', 'netcoreapp2.1'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.1'
            }
          }
          exclude {
            axis {
              name 'DOTNET_VERSION'
              values 'net472', 'net48'
            }
            axis {
              name 'SERVER_VERSION'
              values '2.2'
            }
          }
        }
        
        agent {
          label "${OS_VERSION}"
        }

        stages {
          stage('Initialize-Environment') {
            steps {
              script {
                def SHAREDPIPELINE = load "${env.WORKSPACE}/Jenkinsfile-shared.groovy"
              SHAREDPIPELINE.initializeEnvironmentStep()
              }
            }
          }
          stage('Describe-Build') {
            steps {
              script {
              SHAREDPIPELINE.describeScheduledTestingStage()
              }
            }
          }
          stage('Install-Dependencies') {
            steps {
              script {
              SHAREDPIPELINE.installDependencies()
              }
            }
          }
          stage('Build-Driver') {
            steps {
              script {
              SHAREDPIPELINE.buildDriver()
              }
            }
          }
          stage('Execute-Tests') {
            steps {
              script {
              SHAREDPIPELINE.executeTests(false)
              }
            }
            post {
              always {
                junit testResults: '**/TestResult.xml'
              }
            }
          }
        }
      }
      post {
        aborted {
              script {
          SHAREDPIPELINE.notifySlack('aborted')
              }
        }
        success {
              script {
          SHAREDPIPELINE.notifySlack('completed')
              }
        }
        unstable {
              script {
          SHAREDPIPELINE.notifySlack('unstable')
              }
        }
        failure {
              script {
          SHAREDPIPELINE.notifySlack('FAILED')
              }
        }
      }
    }
  }
}
